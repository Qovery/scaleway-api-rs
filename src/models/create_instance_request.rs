/*
 * Elastic metal API
 *
 * # Introduction  Elastic metal as a service allows ordering a dedicated server on-demand like a cloud instance. Dedicated servers could be used for large workloads, big data, those requiring more security, ….  ## Technical Limitations  - Elastic metal is available in `fr-par-1`,  `fr-par-2`, `nl-ams-1` zones  - Installation is done by preseed (± 10min) (preseed: complete install from a virtual media)  ## Features  - Install (Server is installed by preseed (preseed: complete install from a virtual media), you must define at least one ssh key to install your server)  - Start/Stop/Reboot  - Rescue Reboot, a rescue image is an operating system image designed to help you diagnose and fix an OS experiencing failures. When your server boot on rescue, you can mount your disks and start diagnosing/fixing your image.  - Billed by minute (The billing start when the server is delivered and stop when the server is deleted)  - IPv6, all servers are available with an IPv6 /128  - ReverseIP, You can configure your reverse IP (IPv4 and IPv6), you must register the server IP in your DNS records before calling the endpoint  - Basic monitoring with ping status  - Flexible IP is available ([documentation](https://developers.scaleway.com/en/products/flexible-ip/api/))  - IP failovers are not available in api v1, use the api v1alpha1  ## FAQ  ### How can I get my SSH key id?  You can find your `$SCW_SECRET_KEY` and your `SCW_DEFAULT_ORGANIZATION_ID` at the following page: https://console.scaleway.com/project/credentials  ### How can I add my server to a private network?  See [our online documentation](https://developers.scaleway.com/en/products/vpc-elasticmetal/api/).
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateInstanceRequest {
    /// Please use `project_id` instead
    #[serde(rename = "organization_id", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
    /// The project ID on which to create the instance
    #[serde(rename = "project_id", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    /// Name of the instance
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Database engine of the database (PostgreSQL, MySQL, ...)
    #[serde(rename = "engine")]
    pub engine: String,
    /// Name of the user created when the instance is created
    #[serde(rename = "user_name")]
    pub user_name: String,
    /// Password of the user
    #[serde(rename = "password")]
    pub password: String,
    /// Type of node to use for the instance
    #[serde(rename = "node_type")]
    pub node_type: String,
    /// Whether or not High-Availability is enabled
    #[serde(rename = "is_ha_cluster", skip_serializing_if = "Option::is_none")]
    pub is_ha_cluster: Option<bool>,
    /// Whether or not backups are disabled
    #[serde(rename = "disable_backup", skip_serializing_if = "Option::is_none")]
    pub disable_backup: Option<bool>,
    /// Tags to apply to the instance
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// List of engine settings to be set at database initialisation
    #[serde(rename = "init_settings", skip_serializing_if = "Option::is_none")]
    pub init_settings: Option<Vec<crate::models::ScalewayRdbV1InstanceSetting>>,
    /// Type of volume where data are stored (lssd, bssd, ...)
    #[serde(rename = "volume_type", skip_serializing_if = "Option::is_none")]
    pub volume_type: Option<VolumeType>,
    /// Volume size when volume_type is not lssd (in bytes)
    #[serde(rename = "volume_size", skip_serializing_if = "Option::is_none")]
    pub volume_size: Option<i64>,
    /// One or multiple EndpointSpec used to expose your database instance
    #[serde(rename = "init_endpoints", skip_serializing_if = "Option::is_none")]
    pub init_endpoints: Option<Vec<crate::models::ScalewayRdbV1EndpointSpec>>,
    /// Store logical backups in the same region as the database instance
    #[serde(rename = "backup_same_region", skip_serializing_if = "Option::is_none")]
    pub backup_same_region: Option<bool>,
}

impl CreateInstanceRequest {
    pub fn new(
        engine: String,
        user_name: String,
        password: String,
        node_type: String,
    ) -> CreateInstanceRequest {
        CreateInstanceRequest {
            organization_id: None,
            project_id: None,
            name: None,
            engine,
            user_name,
            password,
            node_type,
            is_ha_cluster: None,
            disable_backup: None,
            tags: None,
            init_settings: None,
            volume_type: None,
            volume_size: None,
            init_endpoints: None,
            backup_same_region: None,
        }
    }
}

/// Type of volume where data are stored (lssd, bssd, ...)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VolumeType {
    #[serde(rename = "lssd")]
    Lssd,
    #[serde(rename = "bssd")]
    Bssd,
}

impl Default for VolumeType {
    fn default() -> VolumeType {
        Self::Lssd
    }
}
