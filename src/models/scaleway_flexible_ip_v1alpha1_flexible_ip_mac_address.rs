/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

/// ScalewayFlexibleIpV1alpha1FlexibleIpMacAddress : MAC address of the Flexible IP

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayFlexibleIpV1alpha1FlexibleIpMacAddress {
    /// ID of the Flexible IP
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// MAC address of the Virtual MAC
    #[serde(rename = "mac_address", skip_serializing_if = "Option::is_none")]
    pub mac_address: Option<String>,
    /// Virtual MAC type
    #[serde(rename = "mac_type", skip_serializing_if = "Option::is_none")]
    pub mac_type: Option<MacType>,
    /// Virtual MAC status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Date of last update of the Virtual MAC (RFC 3339 format)
    #[serde(
        rename = "updated_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_at: Option<Option<String>>,
    /// Date of creation of the Virtual MAC (RFC 3339 format)
    #[serde(
        rename = "created_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_at: Option<Option<String>>,
    /// MAC Addr IP Availability Zone
    #[serde(rename = "zone", skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

impl ScalewayFlexibleIpV1alpha1FlexibleIpMacAddress {
    /// MAC address of the Flexible IP
    pub fn new() -> ScalewayFlexibleIpV1alpha1FlexibleIpMacAddress {
        ScalewayFlexibleIpV1alpha1FlexibleIpMacAddress {
            id: None,
            mac_address: None,
            mac_type: None,
            status: None,
            updated_at: None,
            created_at: None,
            zone: None,
        }
    }
}

/// Virtual MAC type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MacType {
    #[serde(rename = "unknown_type")]
    UnknownType,
    #[serde(rename = "vmware")]
    Vmware,
    #[serde(rename = "xen")]
    Xen,
    #[serde(rename = "kvm")]
    Kvm,
}

impl Default for MacType {
    fn default() -> MacType {
        Self::UnknownType
    }
}
/// Virtual MAC status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "updating")]
    Updating,
    #[serde(rename = "used")]
    Used,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "deleting")]
    Deleting,
}

impl Default for Status {
    fn default() -> Status {
        Self::Unknown
    }
}
