/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayPeriodBaremetalPeriodV1PeriodServer {
    /// ID of the server
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Organization ID the server is attached to
    #[serde(rename = "organization_id", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
    /// Project ID the server is attached to
    #[serde(rename = "project_id", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    /// Name of the server
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Description of the server
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Date of last modification of the server (RFC 3339 format)
    #[serde(
        rename = "updated_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_at: Option<Option<String>>,
    /// Date of creation of the server (RFC 3339 format)
    #[serde(
        rename = "created_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_at: Option<Option<String>>,
    /// Status of the server
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Offer ID of the server
    #[serde(rename = "offer_id", skip_serializing_if = "Option::is_none")]
    pub offer_id: Option<String>,
    /// Offer name of the server
    #[serde(rename = "offer_name", skip_serializing_if = "Option::is_none")]
    pub offer_name: Option<String>,
    /// Array of customs tags attached to the server
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Array of IPs attached to the server
    #[serde(rename = "ips", skip_serializing_if = "Option::is_none")]
    pub ips: Option<Vec<crate::models::ScalewayPeriodBaremetalPeriodV1PeriodIp>>,
    /// Domain of the server
    #[serde(rename = "domain", skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// Boot type of the server
    #[serde(rename = "boot_type", skip_serializing_if = "Option::is_none")]
    pub boot_type: Option<BootType>,
    /// The zone in which is the server
    #[serde(rename = "zone", skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
    #[serde(rename = "install", skip_serializing_if = "Option::is_none")]
    pub install: Option<Box<crate::models::ScalewayBaremetalV1ServerInstall>>,
    /// Server status of ping
    #[serde(rename = "ping_status", skip_serializing_if = "Option::is_none")]
    pub ping_status: Option<PingStatus>,
    /// Options enabled on server
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options:
        Option<Vec<crate::models::ScalewayPeriodBaremetalPeriodV1PeriodServerPeriodOption>>,
    #[serde(rename = "rescue_server", skip_serializing_if = "Option::is_none")]
    pub rescue_server: Option<Box<crate::models::ScalewayBaremetalV1ServerRescueServer>>,
}

impl ScalewayPeriodBaremetalPeriodV1PeriodServer {
    pub fn new() -> ScalewayPeriodBaremetalPeriodV1PeriodServer {
        ScalewayPeriodBaremetalPeriodV1PeriodServer {
            id: None,
            organization_id: None,
            project_id: None,
            name: None,
            description: None,
            updated_at: None,
            created_at: None,
            status: None,
            offer_id: None,
            offer_name: None,
            tags: None,
            ips: None,
            domain: None,
            boot_type: None,
            zone: None,
            install: None,
            ping_status: None,
            options: None,
            rescue_server: None,
        }
    }
}

/// Status of the server
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "delivering")]
    Delivering,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "stopped")]
    Stopped,
    #[serde(rename = "starting")]
    Starting,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "deleting")]
    Deleting,
    #[serde(rename = "locked")]
    Locked,
    #[serde(rename = "out_of_stock")]
    OutOfStock,
    #[serde(rename = "ordered")]
    Ordered,
    #[serde(rename = "resetting")]
    Resetting,
}

impl Default for Status {
    fn default() -> Status {
        Self::Unknown
    }
}
/// Boot type of the server
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BootType {
    #[serde(rename = "unknown_boot_type")]
    UnknownBootType,
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "rescue")]
    Rescue,
}

impl Default for BootType {
    fn default() -> BootType {
        Self::UnknownBootType
    }
}
/// Server status of ping
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PingStatus {
    #[serde(rename = "ping_status_unknown")]
    Unknown,
    #[serde(rename = "ping_status_up")]
    Up,
    #[serde(rename = "ping_status_down")]
    Down,
}

impl Default for PingStatus {
    fn default() -> PingStatus {
        Self::Unknown
    }
}
