/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayPeriodInstancePeriodV1PeriodServer {
    /// The server unique ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The server name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The server organization ID
    #[serde(rename = "organization", skip_serializing_if = "Option::is_none")]
    pub organization: Option<String>,
    /// The server project ID
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Provide as list of allowed actions on the server
    #[serde(rename = "allowed_actions", skip_serializing_if = "Option::is_none")]
    pub allowed_actions:
        Option<Vec<crate::models::ScalewayPeriodInstancePeriodV1PeriodServerPeriodAction>>,
    /// The server associated tags
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The server commercial type (eg. GP1-M)
    #[serde(rename = "commercial_type", skip_serializing_if = "Option::is_none")]
    pub commercial_type: Option<String>,
    /// The server creation date (RFC 3339 format)
    #[serde(
        rename = "creation_date",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<Option<String>>,
    /// True if a dynamic IP is required
    #[serde(
        rename = "dynamic_ip_required",
        skip_serializing_if = "Option::is_none"
    )]
    pub dynamic_ip_required: Option<bool>,
    /// True if IPv6 is enabled
    #[serde(rename = "enable_ipv6", skip_serializing_if = "Option::is_none")]
    pub enable_ipv6: Option<bool>,
    /// The server host name
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    #[serde(rename = "image", skip_serializing_if = "Option::is_none")]
    pub image: Option<Box<crate::models::ScalewayInstanceV1ServerImage>>,
    /// The server protection option is activated
    #[serde(rename = "protected", skip_serializing_if = "Option::is_none")]
    pub protected: Option<bool>,
    /// The server private IP address
    #[serde(
        rename = "private_ip",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub private_ip: Option<Option<String>>,
    #[serde(rename = "public_ip", skip_serializing_if = "Option::is_none")]
    pub public_ip: Option<Box<crate::models::ScalewayInstanceV1ServerPublicIp>>,
    /// The server modification date (RFC 3339 format)
    #[serde(
        rename = "modification_date",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub modification_date: Option<Option<String>>,
    /// The server state
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<crate::models::ScalewayInstanceV1ServerLocation>>,
    #[serde(rename = "ipv6", skip_serializing_if = "Option::is_none")]
    pub ipv6: Option<Box<crate::models::ScalewayInstanceV1ServerIpv6>>,
    #[serde(rename = "bootscript", skip_serializing_if = "Option::is_none")]
    pub bootscript: Option<Box<crate::models::ScalewayInstanceV1ServerBootscript>>,
    /// The server boot type
    #[serde(rename = "boot_type", skip_serializing_if = "Option::is_none")]
    pub boot_type: Option<BootType>,
    #[serde(rename = "volumes", skip_serializing_if = "Option::is_none")]
    pub volumes: Option<crate::models::ScalewayInstanceV1ServerVolumes>,
    #[serde(rename = "security_group", skip_serializing_if = "Option::is_none")]
    pub security_group: Option<Box<crate::models::ScalewayInstanceV1ServerSecurityGroup>>,
    /// The server planned maintenances
    #[serde(rename = "maintenances", skip_serializing_if = "Option::is_none")]
    pub maintenances:
        Option<Vec<crate::models::ScalewayPeriodInstancePeriodV1PeriodServerPeriodMaintenance>>,
    /// The server state_detail
    #[serde(rename = "state_detail", skip_serializing_if = "Option::is_none")]
    pub state_detail: Option<String>,
    /// The server arch
    #[serde(rename = "arch", skip_serializing_if = "Option::is_none")]
    pub arch: Option<Arch>,
    #[serde(rename = "placement_group", skip_serializing_if = "Option::is_none")]
    pub placement_group: Option<Box<crate::models::ScalewayInstanceV1ServerPlacementGroup>>,
    /// The server private NICs
    #[serde(rename = "private_nics", skip_serializing_if = "Option::is_none")]
    pub private_nics: Option<Vec<crate::models::ScalewayPeriodInstancePeriodV1PeriodPrivateNic>>,
    /// The zone in which is the server
    #[serde(rename = "zone", skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

impl ScalewayPeriodInstancePeriodV1PeriodServer {
    pub fn new() -> ScalewayPeriodInstancePeriodV1PeriodServer {
        ScalewayPeriodInstancePeriodV1PeriodServer {
            id: None,
            name: None,
            organization: None,
            project: None,
            allowed_actions: None,
            tags: None,
            commercial_type: None,
            creation_date: None,
            dynamic_ip_required: None,
            enable_ipv6: None,
            hostname: None,
            image: None,
            protected: None,
            private_ip: None,
            public_ip: None,
            modification_date: None,
            state: None,
            location: None,
            ipv6: None,
            bootscript: None,
            boot_type: None,
            volumes: None,
            security_group: None,
            maintenances: None,
            state_detail: None,
            arch: None,
            placement_group: None,
            private_nics: None,
            zone: None,
        }
    }
}

/// The server state
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "stopped")]
    Stopped,
    #[serde(rename = "stopped in place")]
    StoppedInPlace,
    #[serde(rename = "starting")]
    Starting,
    #[serde(rename = "stopping")]
    Stopping,
    #[serde(rename = "locked")]
    Locked,
}

impl Default for State {
    fn default() -> State {
        Self::Running
    }
}
/// The server boot type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BootType {
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "bootscript")]
    Bootscript,
    #[serde(rename = "rescue")]
    Rescue,
}

impl Default for BootType {
    fn default() -> BootType {
        Self::Local
    }
}
/// The server arch
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Arch {
    #[serde(rename = "x86_64")]
    X8664,
    #[serde(rename = "arm")]
    Arm,
}

impl Default for Arch {
    fn default() -> Arch {
        Self::X8664
    }
}
