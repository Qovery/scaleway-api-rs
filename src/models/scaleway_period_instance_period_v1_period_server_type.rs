/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayPeriodInstancePeriodV1PeriodServerType {
    /// Estimated monthly price, for a 30 days month, in Euro
    #[serde(rename = "monthly_price", skip_serializing_if = "Option::is_none")]
    pub monthly_price: Option<i64>,
    /// Hourly price in Euro
    #[serde(rename = "hourly_price", skip_serializing_if = "Option::is_none")]
    pub hourly_price: Option<i64>,
    /// Alternative instance name if any
    #[serde(rename = "alt_names", skip_serializing_if = "Option::is_none")]
    pub alt_names: Option<Vec<String>>,
    #[serde(
        rename = "per_volume_constraint",
        skip_serializing_if = "Option::is_none"
    )]
    pub per_volume_constraint:
        Option<Box<crate::models::ScalewayInstanceV1ServerTypePerVolumeConstraint>>,
    #[serde(rename = "volumes_constraint", skip_serializing_if = "Option::is_none")]
    pub volumes_constraint:
        Option<Box<crate::models::ScalewayInstanceV1ServerTypeVolumesConstraint>>,
    /// Number of CPU
    #[serde(rename = "ncpus", skip_serializing_if = "Option::is_none")]
    pub ncpus: Option<i32>,
    /// Number of GPU
    #[serde(
        rename = "gpu",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub gpu: Option<Option<i32>>,
    /// Available RAM in bytes
    #[serde(rename = "ram", skip_serializing_if = "Option::is_none")]
    pub ram: Option<i32>,
    /// CPU architecture
    #[serde(rename = "arch", skip_serializing_if = "Option::is_none")]
    pub arch: Option<Arch>,
    /// True if it is a baremetal instance
    #[serde(rename = "baremetal", skip_serializing_if = "Option::is_none")]
    pub baremetal: Option<bool>,
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<Box<crate::models::ScalewayInstanceV1ServerTypeNetwork>>,
    #[serde(rename = "capabilities", skip_serializing_if = "Option::is_none")]
    pub capabilities: Option<Box<crate::models::ScalewayInstanceV1ServerTypeCapabilities>>,
}

impl ScalewayPeriodInstancePeriodV1PeriodServerType {
    pub fn new() -> ScalewayPeriodInstancePeriodV1PeriodServerType {
        ScalewayPeriodInstancePeriodV1PeriodServerType {
            monthly_price: None,
            hourly_price: None,
            alt_names: None,
            per_volume_constraint: None,
            volumes_constraint: None,
            ncpus: None,
            gpu: None,
            ram: None,
            arch: None,
            baremetal: None,
            network: None,
            capabilities: None,
        }
    }
}

/// CPU architecture
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Arch {
    #[serde(rename = "x86_64")]
    X8664,
    #[serde(rename = "arm")]
    Arm,
}

impl Default for Arch {
    fn default() -> Arch {
        Self::X8664
    }
}
