/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayPeriodInstancePeriodV1PeriodSetSecurityGroupRulesRequestPeriodRule {
    /// UUID of the security rule to update. If no value is provided, a new rule will be created
    #[serde(
        rename = "id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub id: Option<Option<String>>,
    /// Action to apply when the rule matches a packet
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    /// Protocol family this rule applies to
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<Protocol>,
    /// Direction the rule applies to
    #[serde(rename = "direction", skip_serializing_if = "Option::is_none")]
    pub direction: Option<Direction>,
    /// The range of IP address this rules applies to (IP network)
    #[serde(rename = "ip_range", skip_serializing_if = "Option::is_none")]
    pub ip_range: Option<String>,
    /// Beginning of the range of ports this rule applies to (inclusive). This value will be set to null if protocol is ICMP or ANY
    #[serde(
        rename = "dest_port_from",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub dest_port_from: Option<Option<i32>>,
    /// End of the range of ports this rule applies to (inclusive). This value will be set to null if protocol is ICMP or ANY, or if it is equal to dest_port_from
    #[serde(
        rename = "dest_port_to",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub dest_port_to: Option<Option<i32>>,
    /// Position of this rule in the security group rules list. If several rules are passed with the same position, the resulting order is undefined
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    /// Indicates if this rule is editable. Rules with the value false will be ignored
    #[serde(
        rename = "editable",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub editable: Option<Option<bool>>,
    /// Zone of the rule. This field is ignored
    #[serde(
        rename = "zone",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub zone: Option<Option<String>>,
}

impl ScalewayPeriodInstancePeriodV1PeriodSetSecurityGroupRulesRequestPeriodRule {
    pub fn new() -> ScalewayPeriodInstancePeriodV1PeriodSetSecurityGroupRulesRequestPeriodRule {
        ScalewayPeriodInstancePeriodV1PeriodSetSecurityGroupRulesRequestPeriodRule {
            id: None,
            action: None,
            protocol: None,
            direction: None,
            ip_range: None,
            dest_port_from: None,
            dest_port_to: None,
            position: None,
            editable: None,
            zone: None,
        }
    }
}

/// Action to apply when the rule matches a packet
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "accept")]
    Accept,
    #[serde(rename = "drop")]
    Drop,
}

impl Default for Action {
    fn default() -> Action {
        Self::Accept
    }
}
/// Protocol family this rule applies to
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Protocol {
    #[serde(rename = "TCP")]
    Tcp,
    #[serde(rename = "UDP")]
    Udp,
    #[serde(rename = "ICMP")]
    Icmp,
    #[serde(rename = "ANY")]
    Any,
}

impl Default for Protocol {
    fn default() -> Protocol {
        Self::Tcp
    }
}
/// Direction the rule applies to
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Direction {
    #[serde(rename = "inbound")]
    Inbound,
    #[serde(rename = "outbound")]
    Outbound,
}

impl Default for Direction {
    fn default() -> Direction {
        Self::Inbound
    }
}
