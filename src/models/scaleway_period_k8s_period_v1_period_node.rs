/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayPeriodK8sPeriodV1PeriodNode {
    /// The ID of the node
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The pool ID of the node
    #[serde(rename = "pool_id", skip_serializing_if = "Option::is_none")]
    pub pool_id: Option<String>,
    /// The cluster ID of the node
    #[serde(rename = "cluster_id", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<String>,
    /// It is prefixed by instance type and location information (see https://pkg.go.dev/k8s.io/api/core/v1#NodeSpec.ProviderID).
    #[serde(rename = "provider_id", skip_serializing_if = "Option::is_none")]
    pub provider_id: Option<String>,
    /// The cluster region of the node
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The name of the node
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The public IPv4 address of the node (IPv4 address)
    #[serde(
        rename = "public_ip_v4",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_ip_v4: Option<Option<String>>,
    /// The public IPv6 address of the node (IPv6 address)
    #[serde(
        rename = "public_ip_v6",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_ip_v6: Option<Option<String>>,
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<crate::models::ScalewayK8sV1NodeConditions>,
    /// The status of the node
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Details of the error, if any occured when managing the node
    #[serde(
        rename = "error_message",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub error_message: Option<Option<String>>,
    /// The date at which the node was created (RFC 3339 format)
    #[serde(
        rename = "created_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_at: Option<Option<String>>,
    /// The date at which the node was last updated (RFC 3339 format)
    #[serde(
        rename = "updated_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub updated_at: Option<Option<String>>,
}

impl ScalewayPeriodK8sPeriodV1PeriodNode {
    pub fn new() -> ScalewayPeriodK8sPeriodV1PeriodNode {
        ScalewayPeriodK8sPeriodV1PeriodNode {
            id: None,
            pool_id: None,
            cluster_id: None,
            provider_id: None,
            region: None,
            name: None,
            public_ip_v4: None,
            public_ip_v6: None,
            conditions: None,
            status: None,
            error_message: None,
            created_at: None,
            updated_at: None,
        }
    }
}

/// The status of the node
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "creating")]
    Creating,
    #[serde(rename = "not_ready")]
    NotReady,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "deleting")]
    Deleting,
    #[serde(rename = "deleted")]
    Deleted,
    #[serde(rename = "locked")]
    Locked,
    #[serde(rename = "rebooting")]
    Rebooting,
    #[serde(rename = "creation_error")]
    CreationError,
    #[serde(rename = "upgrading")]
    Upgrading,
    #[serde(rename = "starting")]
    Starting,
    #[serde(rename = "registering")]
    Registering,
}

impl Default for Status {
    fn default() -> Status {
        Self::Unknown
    }
}
