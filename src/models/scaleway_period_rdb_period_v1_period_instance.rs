/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayPeriodRdbPeriodV1PeriodInstance {
    /// Creation date (Format ISO 8601) (RFC 3339 format)
    #[serde(
        rename = "created_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub created_at: Option<Option<String>>,
    #[serde(rename = "volume", skip_serializing_if = "Option::is_none")]
    pub volume: Option<Box<crate::models::ScalewayRdbV1InstanceVolume>>,
    /// Region the instance is in
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// UUID of the instance (UUID format)
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the instance
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Organization ID the instance belongs to (UUID format)
    #[serde(rename = "organization_id", skip_serializing_if = "Option::is_none")]
    pub organization_id: Option<String>,
    /// Project ID the instance belongs to (UUID format)
    #[serde(rename = "project_id", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    /// Status of the instance
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Database engine of the database (PostgreSQL, MySQL, ...)
    #[serde(rename = "engine", skip_serializing_if = "Option::is_none")]
    pub engine: Option<String>,
    /// Available database engine versions for upgrade
    #[serde(rename = "upgradable_version", skip_serializing_if = "Option::is_none")]
    pub upgradable_version:
        Option<Vec<crate::models::ScalewayPeriodRdbPeriodV1PeriodUpgradableVersion>>,
    #[serde(rename = "endpoint", skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<Box<crate::models::ScalewayRdbV1InstanceEndpoint>>,
    /// List of tags applied to the instance
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Advanced settings of the instance
    #[serde(rename = "settings", skip_serializing_if = "Option::is_none")]
    pub settings: Option<Vec<crate::models::ScalewayPeriodRdbPeriodV1PeriodInstanceSetting>>,
    #[serde(rename = "backup_schedule", skip_serializing_if = "Option::is_none")]
    pub backup_schedule: Option<Box<crate::models::ScalewayRdbV1InstanceBackupSchedule>>,
    /// Whether or not High-Availability is enabled
    #[serde(rename = "is_ha_cluster", skip_serializing_if = "Option::is_none")]
    pub is_ha_cluster: Option<bool>,
    /// Read replicas of the instance
    #[serde(rename = "read_replicas", skip_serializing_if = "Option::is_none")]
    pub read_replicas: Option<Vec<crate::models::ScalewayPeriodRdbPeriodV1PeriodReadReplica>>,
    /// Node type of the instance
    #[serde(rename = "node_type", skip_serializing_if = "Option::is_none")]
    pub node_type: Option<String>,
    /// List of engine settings to be set at database initialisation
    #[serde(rename = "init_settings", skip_serializing_if = "Option::is_none")]
    pub init_settings: Option<Vec<crate::models::ScalewayPeriodRdbPeriodV1PeriodInstanceSetting>>,
    /// List of instance endpoints
    #[serde(rename = "endpoints", skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Vec<crate::models::ScalewayPeriodRdbPeriodV1PeriodEndpoint>>,
    #[serde(rename = "logs_policy", skip_serializing_if = "Option::is_none")]
    pub logs_policy: Option<Box<crate::models::UpdateInstanceRequestLogsPolicy>>,
    /// Store logical backups in the same region as the database instance
    #[serde(rename = "backup_same_region", skip_serializing_if = "Option::is_none")]
    pub backup_same_region: Option<bool>,
    /// List of instance maintenances
    #[serde(rename = "maintenances", skip_serializing_if = "Option::is_none")]
    pub maintenances: Option<Vec<crate::models::ScalewayPeriodRdbPeriodV1PeriodMaintenance>>,
}

impl ScalewayPeriodRdbPeriodV1PeriodInstance {
    pub fn new() -> ScalewayPeriodRdbPeriodV1PeriodInstance {
        ScalewayPeriodRdbPeriodV1PeriodInstance {
            created_at: None,
            volume: None,
            region: None,
            id: None,
            name: None,
            organization_id: None,
            project_id: None,
            status: None,
            engine: None,
            upgradable_version: None,
            endpoint: None,
            tags: None,
            settings: None,
            backup_schedule: None,
            is_ha_cluster: None,
            read_replicas: None,
            node_type: None,
            init_settings: None,
            endpoints: None,
            logs_policy: None,
            backup_same_region: None,
            maintenances: None,
        }
    }
}

/// Status of the instance
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "ready")]
    Ready,
    #[serde(rename = "provisioning")]
    Provisioning,
    #[serde(rename = "configuring")]
    Configuring,
    #[serde(rename = "deleting")]
    Deleting,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "autohealing")]
    Autohealing,
    #[serde(rename = "locked")]
    Locked,
    #[serde(rename = "initializing")]
    Initializing,
    #[serde(rename = "disk_full")]
    DiskFull,
    #[serde(rename = "backuping")]
    Backuping,
    #[serde(rename = "snapshotting")]
    Snapshotting,
    #[serde(rename = "restarting")]
    Restarting,
}

impl Default for Status {
    fn default() -> Status {
        Self::Unknown
    }
}
