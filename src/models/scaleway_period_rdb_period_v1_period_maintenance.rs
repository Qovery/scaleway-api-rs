/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayPeriodRdbPeriodV1PeriodMaintenance {
    /// Start date of the maintenance window (RFC 3339 format)
    #[serde(
        rename = "starts_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub starts_at: Option<Option<String>>,
    /// End date of the maintenance window (RFC 3339 format)
    #[serde(
        rename = "stops_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub stops_at: Option<Option<String>>,
    /// Closed maintenance date (RFC 3339 format)
    #[serde(
        rename = "closed_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub closed_at: Option<Option<String>>,
    /// Maintenance information message
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Status of the maintenance
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl ScalewayPeriodRdbPeriodV1PeriodMaintenance {
    pub fn new() -> ScalewayPeriodRdbPeriodV1PeriodMaintenance {
        ScalewayPeriodRdbPeriodV1PeriodMaintenance {
            starts_at: None,
            stops_at: None,
            closed_at: None,
            reason: None,
            status: None,
        }
    }
}

/// Status of the maintenance
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "done")]
    Done,
    #[serde(rename = "canceled")]
    Canceled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Unknown
    }
}
