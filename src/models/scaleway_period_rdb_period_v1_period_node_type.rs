/*
 * Account API
 *
 * # Introduction  The Account API allows you to manage projects. Project is Scalewayâ€™s resource management feature. Designed to help you organize your infrastructure and cloud services, the feature allows resources to be isolated and grouped into specific projects.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ScalewayPeriodRdbPeriodV1PeriodNodeType {
    /// Node Type name identifier
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Current stock status for the Node Type
    #[serde(rename = "stock_status", skip_serializing_if = "Option::is_none")]
    pub stock_status: Option<StockStatus>,
    /// Current specs of the offer
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Number of virtual CPUs
    #[serde(rename = "vcpus", skip_serializing_if = "Option::is_none")]
    pub vcpus: Option<i32>,
    /// Quantity of RAM (in bytes)
    #[serde(rename = "memory", skip_serializing_if = "Option::is_none")]
    pub memory: Option<i32>,
    #[serde(rename = "volume_constraint", skip_serializing_if = "Option::is_none")]
    pub volume_constraint: Option<Box<crate::models::ScalewayRdbV1NodeTypeVolumeConstraint>>,
    /// The Node Type is compliant with Block Storage
    #[serde(rename = "is_bssd_compatible", skip_serializing_if = "Option::is_none")]
    pub is_bssd_compatible: Option<bool>,
    /// The Node Type is currently disabled
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// The Node Type is currently in beta
    #[serde(rename = "beta", skip_serializing_if = "Option::is_none")]
    pub beta: Option<bool>,
    /// Available storage options for the Node Type
    #[serde(
        rename = "available_volume_types",
        skip_serializing_if = "Option::is_none"
    )]
    pub available_volume_types:
        Option<Vec<crate::models::ScalewayPeriodRdbPeriodV1PeriodNodeTypePeriodVolumeType>>,
    /// The Node Type can be used only with high availability option
    #[serde(rename = "is_ha_required", skip_serializing_if = "Option::is_none")]
    pub is_ha_required: Option<bool>,
    /// Region the Node Type is in
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

impl ScalewayPeriodRdbPeriodV1PeriodNodeType {
    pub fn new() -> ScalewayPeriodRdbPeriodV1PeriodNodeType {
        ScalewayPeriodRdbPeriodV1PeriodNodeType {
            name: None,
            stock_status: None,
            description: None,
            vcpus: None,
            memory: None,
            volume_constraint: None,
            is_bssd_compatible: None,
            disabled: None,
            beta: None,
            available_volume_types: None,
            is_ha_required: None,
            region: None,
        }
    }
}

/// Current stock status for the Node Type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StockStatus {
    #[serde(rename = "unknown")]
    Unknown,
    #[serde(rename = "low_stock")]
    LowStock,
    #[serde(rename = "out_of_stock")]
    OutOfStock,
    #[serde(rename = "available")]
    Available,
}

impl Default for StockStatus {
    fn default() -> StockStatus {
        Self::Unknown
    }
}
